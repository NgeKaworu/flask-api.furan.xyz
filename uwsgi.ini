[uwsgi]
#uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程。
master = true 

#指定socket文件，也可以指定为127.0.0.1:9000，这样就会监听到网络套接字
socket = :8000
#http = :8000

#在app加载前切换到当前目录， 指定运行目录
chdir = /home/web/be/flask-api.furan.xyz

#回调
callable = app

#虚拟环境
#pythonpath = /root/workspaces/env1/

#编译环境
#home = /root/workspaces/rest/bin/python3.7

# wsgi入口文件
wsgi-file = run.py

# 加载一个WSGI模块,这里加载mysite/wsgi.py这个模块
# module = mysite.wsgi 

#指定pid文件
pidfile = ./pid.uwsgi

# 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器
daemonize = ./log.uwsgi

#当服务器退出的时候自动删除unix socket文件和pid文件。
vacuum = true 

#设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数。这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）
reload-mercy = 20

#允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程
enable-threads = true 

#启动2个工作进程，生成指定数目的worker/进程
processes = 2 

#一个请求花费的时间超过了这个harakiri超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）
harakiri = 60

#在每个worker而不是master中加载应用
lazy-apps = true 

#用户组
uid = www
gid = www
